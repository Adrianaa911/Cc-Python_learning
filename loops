--  for Loops

ingredients = ["milk", "sugar", "vanilla extract", "dough", "chocolate"]

for ingredient in ingredients:
  print(ingredient)

Taks:
Write a for loop that prints each sport in the list sport_games.

sport_games = ["football", "hockey", "baseball", "cricket"]
for item in sport_games:
  print(item)

-- For Loops: Using Range

for temp in range(6):
  print("Learning Loops!")   
#output:
Learning Loops!
Learning Loops!
Learning Loops!
Learning Loops!
Learning Loops!
Learning Loops!

for temp in range(6):
  print("Loop is on iteration number " + str(temp + 1))

#Would output:

Loop is on iteration number 1
Loop is on iteration number 2
Loop is on iteration number 3
Loop is on iteration number 4
Loop is on iteration number 5
Loop is on iteration number 6

Task:
1.Use the range() function in a for loop to print() out the provided promise variable five times.

promise = "I will finish the python loops module!"

for item in range(5):
  print(promise)

-- While Loops: Introduction
In Python, for loops are not the only type of loops we can use. Another type of loop is called a while loop and is a form of indefinite iteration.

A while loop performs a set of instructions as long as a given condition is true.

count = 0
while count <= 3:
  # Loop Body
  print(count)
  count += 1

#Letâ€™s break the loop down:
count is initially defined with the value of 0. The conditional statement in the while loop is count <= 3, which is true at the initial iteration of the loop, so the loop body executes.
Inside the loop body, count is printed and then incremented by 1.
When the first iteration of the loop has finished, Python returns to the top of the loop and checks the conditional again. After the first iteration, count would be equal to 1 so the conditional still evaluates to True and so the loop continues.
This continues until the count variable becomes 4. At that point, when the conditional is tested it will no longer be True and the loop will stop.

The output would be:

0
1
2
3

*Elegant loops:
Similar to for loops, Python allows us to write elegant one-line while loops. Here is our previous example in a single line:

count = 0
while count <= 3: print(count); count += 1

Note: Here we separate each statement with a ; to denote a separate line of code.

Tasks:

# While Loop Walkthrough
count = 0
print("Starting While Loop")
while count <= 3:
  # Loop Body
  # Print if the condition is still true
  print("Loop Iteration - count <= 3 is still true")
  # Print the current value of count 
  print("Count is currently " + str(count))
  # Increment count
  count += 1
  print(" ----- ")
print("While Loop ended")

# Your code below: 
countdown = 10
print("Starting counting down")
while countdown >= 0:
  print(countdown)
  countdown -= 1
  #print("-----")
print("We have liftoff!")
