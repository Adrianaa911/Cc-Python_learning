-- Defining a Function

A function consists of many parts, so let’s first get familiar with its core - a function definition.

Here’s an example of a function definition:

def function_name():
  # functions tasks go here

There are some key components we want to note here:
The def keyword indicates the beginning of a function (also known as a function header). The function header is followed by a name in snake_case format that describes the task the function performs. 
It’s best practice to give your functions a descriptive yet concise name.
Following the function name is a pair of parenthesis ( ) that can hold input values known as parameters (more on parameters later in the lesson!). In this example function, we have no parameters.
A colon : to mark the end of the function header.
Lastly, we have one or more valid python statements that make up the function body (where we have our python comment).

Here is an example of a function that greets a user for our trip planning application:

def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")

--calling a function
Now that we’ve practiced defining a function, let’s learn about calling a function to execute the code within its body.

def directions_to_timesSq():
  print("Walk 4 mins to 34th St Herald Square train station.")
  print("Take the Northbound N, Q, R, or W train 1 stop.")
  print("Get off the Times Square 42nd Street stop.")
  print("Take lots of pictures!")

directions_to_timesSq()


-- Whitespace & Execution Flow

Consider our welcome function for our trip planning application:

def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")


The print statements all run together when trip_welcome() is called. This is because they have the same base level of indentation (2 spaces).

In Python, the amount of 
Preview: Docs Loading link description
whitespace
 tells the computer what is part of a function and what is not part of that function.

If we wanted to write another statement outside of trip_welcome(), we would have to unindent the new line:

def trip_welcome():
  # Indented code is part of the function body
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")

# Unindented code below is not part of the function body
print("Woah, look at the weather outside! Don't walk, take the train!")

trip_welcome()

Our trip_welcome() function steps will not print Woah, look at the weather outside! Don't walk, take the train! on our function call. 
The print() statement was unindented to show it was not a part of the function body but rather a separate statement.

#We would see the following output from this program:
Woah, look at the weather outside! Don't walk, take the train!
Welcome to Tripcademy!
Let's get you to your destination.

Lastly, note that the execution of a program always begins on the first line. The code is then executed one line at a time from top to bottom. This is known as execution flow and is the order a program in python executes code.

Woah, look at the weather outside! Don't walk, take the train! was printed before the print() statements from the function trip_welcome().

Even though our function was defined before our lone print() statement, we didn’t call our function until after.


Tasks:
1.We are going to help our trip planner users figure out if they should travel today based on the weather. Let’s let our users know we can check the weather for them.
Write a print() statement that will output Checking the weather for you!.

2.We took a look outside and see a bright sunny day. Write a function called weather_check() that will print a message to our users that it’s a great day to travel! The function should output:

Looks great outside! Enjoy your trip.

Note: Don’t call your function just yet! We will do that in the next step.

3.Oh no! It looks like some clouds came in and it started raining. Our users shouldn’t go on a trip in the rain. In our weather_check() function add a second print() statement under the first one which prints a warning message for our travelers! It should print:

False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.

4.Call the function weather_check().

5.Unindent the final print statement (the one starting with “False Alarm”) in your weather_check() function. Run the program again.
What is different?

print("Checking the weather for you!")

def weather_check():
  print("Looks great outside! Enjoy your trip.")
print("False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.")

weather_check()

-- Parameters & Arguments

Let’s return to our trip_welcome() function one more time! Let’s modify our function to give a welcome that is a bit more detailed.

def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Looks like you're going to Times Square today.")

trip_welcome()


This will output:

Welcome to Tripcademy!
Looks like you're going to Times Square today.


Our function does a really good job of welcoming anyone who is traveling to Times Square but a really poor job if they are going anywhere else.
In order for us to make our function a bit more dynamic, we are going to use the concept of function parameters
Function parameters allow our function to accept data as an input value. We list the parameters a function takes as input between the parentheses of a function ( ).

Here is a function that defines a single parameter:

def my_function(single_parameter)
  # some code


In the context of our trip_welcome() function, it would look like this:

def trip_welcome(destination):
  print("Welcome to Tripcademy!") 
  print("Looks like you're going to " + destination + " today.")


In the above example, we define a single parameter called destination and apply it in our function body in the second print statement.
We are telling our function it should expect some data passed in for destination that it can apply to any statements in the function body.

But how do we actually use this parameter? Our parameter of destination is used by passing in an argument to the function when we call it.

trip_welcome("Times Square")


This would output:

Welcome to Tripcademy!
Looks like you're going to Times Square today. 

tasks:
1.
We want to create a program that allows our users to generate the directions for their upcoming trip!

Create a function called generate_trip_instructions() that defines one parameter called location.

Note: Since we did not define any code in our function yet, we will receive an error in our output terminal. Don’t worry, we will be filling in the code in the next step.

Checkpoint 2 Passed
2.
generate_trip_instructions() should print out the following:

Looks like you are planning a trip to visit <location>


Where <location> will represent the location parameter.

Checkpoint 3 Passed
3.
generate_trip_instructions() should also let our users know they can reach their location using public transit.

Let’s have generate_trip_instructions()also print out the following on a new line:

You can use the public subway system to get to <location>


Where <location> will represent the location parameter.

Checkpoint 4 Passed
4.
Time for some greenery! Let’s see what happens when we call the function and input the argument "Central Park", a backyard wonder in the heart of New York City.

Checkpoint 5 Passed
5.
The day trip is over and we need to get back to the train station to head home. Change the argument to "Grand Central Station" and call the function again.
What changed in the output?

def generate_trip_instructions(location):
  print("Looks like you are planning a trip to visit " + location)
  print("You can use the public subway system to get to " + location)

generate_trip_instructions("Grand Central Station")
