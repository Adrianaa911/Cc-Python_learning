Loop Control: Continue
7 min
While the break control statement will come in handy, there are other situations where we donâ€™t want to end the loop entirely. 
What if we only want to skip the current iteration of the loop?

#Loop through the ages list. If an entry is less than 21, skip it and move to the next entry. Otherwise, print() the age.
ages = [12, 38, 34, 26, 21, 19, 67, 41, 17]

for age in ages:
  if age < 21:
    continue
  print(age) 

-- Nested Loops
12 min
Preview: Docs Loading link description
Loops
 can be nested in Python, as they can with other programming languages. We will find certain situations that require nested loops.

Suppose we are in charge of a science class, that is split into three project teams:

project_teams = [["Ava", "Samantha", "James"], ["Lucille", "Zed"], ["Edgar", "Gabriel"]]


Using a for or while loop can be useful here to get each team:

for team in project_teams:
  print(team)


Would output:

["Ava", "Samantha", "James"]
["Lucille", "Zed"]
["Edgar", "Gabriel"]


But what if we wanted to print each individual student? In this case, we would actually need to nest our loops to be able to loop through each sub-list. Here is what it would look like:

# Loop through each sublist
for team in project_teams:
  # Loop elements in each sublist
  for student in team:
    print(student)


This would output:

Ava
Samantha
James
Lucille
Zed
Edgar
Gabriel

