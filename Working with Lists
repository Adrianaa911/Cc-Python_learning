*Add and remove items from a list using a specific index.
*Create lists with continuous values.
*Get the length of a list.
*Select portions of a list (called slicing).
*Count the number of times that an element appears in a list.
*Sort a list of items.


-- Adding by Index: Insert
The Python list method .insert() allows us to add an element to a specific index in a list.

The .insert() method takes in two inputs:
1.The index you want to insert into.
2.The element you want to insert at the specified index.
The .insert() method will handle shifting over elements and can be used with negative indices.

store_line = ["Karla", "Maxium", "Martim", "Isabella"]
store_line.insert(2, "Vikor")
print(store_line) 

Task:
front_display_list = ["Mango", "Filet Mignon", "Chocolate Milk"]
print(front_display_list)

1. Use .insert() to add "Pineapple" to the front of the list.

front_display_list.insert(0, "Pineapple")
print(front_display_list)

-- Removing by Index: Pop
 Python gives us a method to remove elements at a specific index using a method called .pop().

The .pop() method takes an optional single input: the index for the element you want to remove.

cs_topics = ["Python", "Data Structures", "Balloon Making", "Algorithms", "Clowns 101"]

#First let’s remove "Clowns 101"

removed_element = cs_topics.pop()
print(cs_topics)
print(removed_element)

#Lastly let’s remove "Balloon Making"
cs_topics.pop(2)
print(cs_topics)

Tasks:
data_science_topics = ["Machine Learning", "SQL", "Pandas", "Algorithms", "Statistics", "Python 3"]
print(data_science_topics)

1.Let’s remove the last item from the list of data_science_topics using our newly learned .pop() method.

data_science_topics.pop()
print(data_science_topics)

2. Looks like there is overlap on the "Algorithms" topic as well. Let’s use .pop() to remove it as well.
Print data_science_topics to see the changes.

data_science_topics.pop(-2)
print(data_science_topics)


-- Consecutive Lists: Range
Python gives us an easy way of creating these types of lists using a built-in function called range().
The function range() takes a single input, and generates numbers starting at 0 and ending at the number before the input.
So, if we want the numbers from 0 through 9, we use range(10) because 10 is 1 greater than 9:

my_range = range(10)
print(my_range)

range(0, 10)  #output


Notice something different? The range() function is unique in that it creates a range object. It is not a typical list like the ones we have been working with.

In order to use this object as a list, we have to first convert it using another built-in function called list().
The list() function takes in a single input for the object you want to convert.
We use the list() function on our range object like this:

print(list(my_range))

Would output:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Tasks:
1. Modify number_list so that it is a range containing numbers starting at 0 and up to, but not including, 9.

number_list = range(9)
print(list(number_list))
[0, 1, 2, 3, 4, 5, 6, 7, 8]  #output

2. Create a range called zero_to_seven with the numbers 0 through 7.
Print the result in list form.

zero_to_seven = range(8)
print(list(zero_to_seven))
[0, 1, 2, 3, 4, 5, 6, 7]   #output

